{"name":"Scheme-experimentations","tagline":"Could the beautiful scheme language be used to develop a database driven web application ?","body":"You love scheme\r\n===============\r\n\r\nAnd so do we.\r\n\r\nYou understand that simplicity is beautiful, and that scheme is the very essence of what it means to write software. But somehow, scheme is perceived as an abstract ideal that can hardly be used in the real world. We begged to differ, so we challenged ourselves to build a credible web application written in our beloved language, and this project was born.\r\n\r\nWe hope you can find inspiration in it.\r\n\r\nHandling HTTP requests\r\n----------------------\r\n\r\nMany have explored the idea of building an HTTP server written in scheme. We instead chose to focus on writing our application logic in scheme, and to rely on the tools offered by Linux for everything else. So we ended up embedding the [Chicken Scheme](http://www.call-cc.org/) runtime into a [FastCGI](http://www.fastcgi.com/) module hosted by the [Apache HTTP server](http://httpd.apache.org/).\r\n\r\nThe [FastCGI foreign interface](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/sources/foreign-interfaces/fastcgi.scm) provides access to the following low level functions:\r\n\r\n    FCGX_GetParam()\r\n    FCGX_GetLineEx()\r\n    FCGX_PutS()\r\n\r\nThe [HTTP module](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/sources/infrastructure/http/http.scm) then offers the following scheme procedures:\r\n\r\n    (http-request-method)\r\n    (http-read-fastcgi-stream)\r\n    (http-write-header)\r\n    (http-write-body)\r\n\r\nThe request processing code is [macro generated](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/documentation/macros/services/define-request.md), so all you have to code looks like this:\r\n\r\n    (define-http-binding\r\n      \"GET\"\r\n      \"^customers/(\\\\d{1,6})$\"\r\n      get-customer-service\r\n      http-parse-get-customer-request\r\n      http-format-get-customer-response)\r\n\r\n    (define (http-parse-get-customer-request route-captures request-body)\r\n      (make-get-customer-request\r\n        (string->number (car route-captures))))\r\n\r\n    (define (http-format-get-customer-response response)\r\n      (json-format-response response json-format-get-customer-response))\r\n\r\nThen all is registered to the Apache HTTP server with this simple configuration:\r\n\r\n    ScriptAlias /api/ \"/usr/local/apache2/api/\"\r\n\r\n    <Directory \"/usr/local/apache2/api\">\r\n      AllowOverride None\r\n      Require all granted\r\n      SetHandler fcgid-script\r\n      Options +ExecCGI\r\n      FcgidWrapper /usr/local/apache2/api/scheme virtual\r\n    </Directory>\r\n\r\nParsing and formatting JSON\r\n---------------------------\r\n\r\nWe chose the ubiquitous JSON format to carry our HTTP payloads. The [Jansson library](http://www.digip.org/jansson/) fitted our needs nicely, so we built the [Jansson foreign interface](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/sources/foreign-interfaces/jansson.scm) to provide access to the following low level functions:\r\n\r\n    json_loads()\r\n    json_integer_value()\r\n    json_object_set()\r\n    json_dumps()\r\n\r\nThe [JSON module](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/sources/infrastructure/json/json.scm) then offers the following scheme procedures:\r\n\r\n    (with-parsed-json-object)\r\n    (json-object-property)\r\n    (json-object-property-set!)\r\n    (json-object->string)\r\n\r\nThe parsing and formatting code for the JSON requests and responses is [macro generated](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/documentation/macros/services/define-request.md), so all you have to code looks like this:\r\n\r\n    (define-request new-customer-request\r\n      (first-name string #t 1 50)\r\n      (last-name string #t 1 50)\r\n      (is-vip boolean))\r\n    \r\nAnd you automatically gain code capable of parsing HTTP requests such as:\r\n\r\n    POST /api/customers HTTP/1.1\r\n    Host: localhost\r\n\r\n    {\r\n      \"first-name\": \"Alice\",\r\n      \"last-name\": \"Allison\",\r\n      \"is-vip\": true\r\n    }\r\n\r\nStoring persistent data\r\n-----------------------\r\n\r\nWe intended to fully exploit our fine-grained control over the HTTP requests, notably through aggressive HTTP caching. So we relaxed our performance requirements at the database level, and ended up leveraging the widely used [SQLite library](http://www.sqlite.org/).\r\n\r\nThe [SQLite foreign interface](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/sources/foreign-interfaces/sqlite.scm) provides access to the following low level functions:\r\n\r\n    sqlite3_open()\r\n    sqlite3_prepare_v2()\r\n    sqlite3_bind_int()\r\n    sqlite3_step()\r\n\r\nThe [SQL module](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/blob/master/sources/infrastructure/sql/sql.scm) then offers the following scheme procedures:\r\n\r\n    (with-sql-connection)\r\n    (within-sql-transaction)\r\n    (sql-execute)\r\n    (sql-read)\r\n\r\nThe code for the basic CRUD operations is [macro generated](https://github.com/Mathieu-Desrochers/Scheme-Experimentations/tree/master/sources/infrastructure/sql), so all you have to code looks like this:\r\n\r\n    (define-table\r\n      (customers-table\r\n        \"customers\")\r\n      (customer-row\r\n        (\"customer-id\" integer)\r\n        (\"first-name\" string)\r\n        (\"last-name\" string)\r\n        (\"is-vip\" boolean))\r\n      (custom-selects)\r\n      (custom-executes))\r\n\r\nAnd you automatically gain the following procedures:\r\n\r\n    (make-customer-row)\r\n    (customers-table-insert)\r\n    (customers-table-select-by-customer-id)\r\n    (customers-table-update)\r\n    (customers-table-delete)\r\n\r\nSpread the scheme love\r\n----------------------\r\n\r\nAs you can see, we took great care not impose any design decisions on anyone who would like to build upon this project. Simply knowing you used our foreign interfaces will make us smile. You liked our modules, or even reused some macros? We are happy like it's our birthday.\r\n\r\nPlease fork this project and build the next big thing in scheme.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}